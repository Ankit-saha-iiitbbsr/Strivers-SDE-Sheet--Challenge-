#include <bits/stdc++.h> 
/************************************************************

    Following is the TreeNode class structure:

    template <typename T>
    class TreeNode {
       public:
        T val;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T val) {
            this->val = val;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/

vector<int> getTopView(TreeNode<int> *root) {
    // Write your code here.
    vector<int>ans;    // To store ans

   if(!root)

   return ans;

 

   map<int,int> TN;       // For mapping with horizontal 

                                       // Difference and data

 

   queue<pair<TreeNode<int> *,int>> q;    // to check 

 

   q.push({root,0});

 

   while(!q.empty()){

       auto temp = q.front();

       q.pop();

        TreeNode<int> *N = temp.first;

        int hd = temp.second;

 

        if(TN.find(hd)==TN.end()){

            TN[hd] = N->val;

        }

 

        if(N->left){

          q.push({N->left, hd - 1});

        }

         if(N->right){

           q.push({N->right, hd + 1});

        }

   }

 

   for(auto i:TN)

   ans.push_back(i.second);
   return ans;

    // Time Complexity: O(N*logN)
    // Space Complexity: O(N)
   /* map<int, int> hash;
    vector<int> ans;
    if(root == NULL) return ans;
    // We will do a Level Order Traversal
    queue<pair<TreeNode<int>*, int>> q;
    pair<TreeNode<int>*, int> p = make_pair(root, 0);
    q.push(p);
    while(!q.empty()){
        int n = q.size();
        for(int i = 0; i < n; i++){
            pair<TreeNode<int>*, int> curr = q.front();
            q.pop();
            if(hash.find(curr.second) == hash.end()){
                hash[curr.second] = curr.first->val;
            }
            if(curr.first->left != NULL){
                pair<TreeNode<int>*, int> p = make_pair(curr.first->left, curr.second - 1);
                q.push(p);
            }
            if(curr.first->right != NULL){
                pair<TreeNode<int>*, int> p = make_pair(curr.first->right, curr.second + 1);
                q.push(p);
            }
        }
    }

    for(auto it : hash){
        ans.push_back(it.second);
    }

    return ans;*/
}
